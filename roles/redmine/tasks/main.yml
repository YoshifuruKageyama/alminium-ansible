- yum: name=ruby-libs state=absent

- yum: name=epel-release

- yum: name=libyaml

- yum: name={{ item }}
  with_items:
  - ruby
  - ruby-devel

- yum: name={{ item }} state=installed
  with_items:
  - unzip
  - ImageMagick
  - httpd
  - mod_ssl
  - sudo
  - gcc-c++
  - patch
  - git
  - subversion
  - mercurial
  - mod_wsgi
  - mod_perl
  - perl-Apache-DBI
  - perl-Digest-SHA
  - libical
  - python-docutils
  - wget
  - libselinux-python # for selinux ansible module
  - make
  - gcc
  - which
  - openssl-devel
  - curl-devel
  - zlib-devel
  - ImageMagick-devel
  - libxml2-devel
  - libxslt-devel
  - sqlite-devel
  - libffi-devel

#- copy: src=mod_auth_mysql-3.0.0-11.el6.1.redmine.x86_64.rpm dest=/tmp 
#- yum: name=/tmp/mod_auth_mysql-3.0.0-11.el6.1.redmine.x86_64.rpm

- file: path=/etc/httpd/Apache/Authn state=directory owner=apache group=apache

- debug: msg="============= Setup Passenger ====================="
- name: Install Passenger
  get_url: url=https://oss-binaries.phusionpassenger.com/yum/definitions/el-passenger.repo dest=/etc/yum.repos.d/passenger.repo validate_certs=no
  environment: "{{env}}"

- lineinfile: dest=/etc/yum.repos.d/passenger.repo state=present regexp=^repo_gpgcheck=1 line=repo_gpgcheck=0
- lineinfile: dest=/etc/yum.repos.d/passenger.repo state=present regexp=^repo_gpgcheck=1 line=repo_gpgcheck=0

- rpm_key: state=present key=https://packagecloud.io/gpg.key validate_certs=no
  environment: "{{env}}"

- yum: name=mod_passenger disable_gpg_check=yes

- debug: msg="============= Setup Redmine ====================="

- name: Checkout Redmine Source Code
  git: repo=https://github.com/redmine/redmine.git version={{redmine_ver}} dest=/opt/alminium
  environment: "{{env}}"

- name: Create Redmine Database Configuration
  template: src=database.yml.j2 dest=/opt/alminium/config/database.yml owner=apache group=apache

- script: install-redmine.sh /opt/alminium {{LANG}}
  environment: "{{env}}"

- name: Create Apache Configuration
  template: src=redmine.conf.j2 dest=/etc/httpd/conf.d/redmine.conf owner=apache group=apache

- file: path=/opt/alminium/bin state=directory owner=apache group=apache recurse=true
- copy: src=alm-sync-scm dest=/opt/alminium/bin 

- name: Create Dir
  file: path=/opt/alminium/tmp state=directory owner=apache group=apache mode=777

- copy: src=init.mysql dest=/tmp
- command: mysql alminium -e "source /tmp/init.mysql"

- selinux: state=disabled
- service: name=httpd state=started enabled=yes
  when: ansible_virtualization_type != "docker"

# TODO: iptables should enabled 
#- service: name=iptables state=stopped enabled=no
#  when: docker is undefined
- service: name=firewalld state=stopped enabled=no
  when: ansible_virtualization_type != "docker"

- name: Docker
  yum: name=python-pip
  when: ansible_virtualization_type == "docker"

- pip: name=supervisor

  when: ansible_virtualization_type == "docker"

- copy: src=supervisord.conf dest=/etc/supervisord.conf
  when: ansible_virtualization_type == "docker"

- command: /usr/bin/supervisord -c /etc/supervisord.conf
  async: 15
  poll: 0
  when: ansible_virtualization_type == "docker"

- name: Create Test Project
  command: > 
    curl --user admin:admin -L -k
         -H "Content-Type: application/json"
         -d '{"project": {"name": "test", "identifier": "test", "is_public": "true"}}'
         https://127.0.0.1/projects.json
#  failed_when: "error in command_result.stdout"
  ignore_errors: yes
  tags:
   - no_reinit

- name: Add admin as test project member
  command: >
    curl --user admin:admin -L -k
         -H "Content-Type: application/json"
         -d '{"membership": {"user_id": "1", "role_ids": [3]}}'
         https://127.0.0.1/projects/test/memberships.json
#  failed_when: "error in command_result.stdout"
  ignore_errors: yes
  tags:
   - no_reinit
